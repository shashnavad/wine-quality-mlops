apiVersion: batch/v1
kind: Job
metadata:
  name: wine-quality-pipeline
  namespace: mlops
spec:
  template:
    spec:
      containers:
      - name: wine-quality-pipeline
        image: pes1ug19cs601/wine-quality-mlops:latest
        command:
        - python
        - -c
        - |
          import pandas as pd
          import numpy as np
          from sklearn.model_selection import train_test_split
          from sklearn.ensemble import RandomForestRegressor
          from sklearn.preprocessing import StandardScaler
          import joblib
          import mlflow
          import os
          import json
          
          # Set MLflow tracking URI
          mlflow.set_tracking_uri('http://mlflow-service.mlops.svc.cluster.local:5000')
          
          # Parameters
          data_path = 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'
          hyperparameters = {
              'n_estimators': 100,
              'max_depth': None,
              'min_samples_split': 2,
              'min_samples_leaf': 1,
              'random_state': 42
          }
          
          # Load data
          print("Loading data from", data_path)
          df = pd.read_csv(data_path, sep=";")
          
          # Split features and labels
          X = df.drop('quality', axis=1)
          y = df['quality']
          
          # Scale features
          print("Scaling features")
          scaler = StandardScaler()
          X_scaled = scaler.fit_transform(X)
          
          # Split data
          print("Splitting data")
          X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
          
          # Train model
          print("Training model with hyperparameters:", hyperparameters)
          model = RandomForestRegressor(**hyperparameters)
          model.fit(X_train, y_train)
          
          # Evaluate model
          train_score = model.score(X_train, y_train)
          test_score = model.score(X_test, y_test)
          
          print(f"Training R² score: {train_score:.4f}")
          print(f"Test R² score: {test_score:.4f}")
          
          # Log to MLflow
          print("Logging to MLflow")
          with mlflow.start_run(run_name="wine-quality-k8s-job"):
              mlflow.log_params(hyperparameters)
              mlflow.log_metric("train_r2", train_score)
              mlflow.log_metric("test_r2", test_score)
              mlflow.sklearn.log_model(model, "model")
              
          print("Pipeline completed successfully!")
      restartPolicy: Never
  backoffLimit: 2 