# PIPELINE DEFINITION
# Name: wine-quality-pipeline
# Description: End-to-end ML pipeline for wine quality prediction
# Inputs:
#    data_path: str [Default: 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv']
#    max_depth: int
#    min_samples_leaf: int [Default: 1.0]
#    min_samples_split: int [Default: 2.0]
#    n_estimators: int [Default: 100.0]
#    random_state: int [Default: 42.0]
components:
  comp-preprocess:
    executorLabel: exec-preprocess
    inputDefinitions:
      parameters:
        data_path:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRUCT
  comp-train:
    executorLabel: exec-train
    inputDefinitions:
      parameters:
        features_path:
          parameterType: STRING
        hyperparameters:
          parameterType: STRUCT
        labels_path:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRUCT
deploymentSpec:
  executors:
    exec-preprocess:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'numpy'\
          \ 'scikit-learn' 'joblib' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess(data_path: str) -> dict:\n    \"\"\"Preprocess the\
          \ wine quality data.\"\"\"\n    # Create output directories\n    os.makedirs('/tmp/processed',\
          \ exist_ok=True)\n\n    # Define output paths\n    features_path = '/tmp/processed/features.npy'\n\
          \    labels_path = '/tmp/processed/labels.npy'\n    scaler_path = '/tmp/processed/scaler.joblib'\n\
          \n    # Load data\n    df = pd.read_csv(data_path, sep=\";\")\n\n    # Split\
          \ features and labels\n    X = df.drop('quality', axis=1)\n    y = df['quality']\n\
          \n    # Scale features\n    scaler = StandardScaler()\n    X_scaled = scaler.fit_transform(X)\n\
          \n    # Save processed data\n    np.save(features_path, X_scaled)\n    np.save(labels_path,\
          \ y.values)\n    joblib.dump(scaler, scaler_path)\n\n    print(f\"Preprocessed\
          \ features saved to {features_path}\")\n    print(f\"Preprocessed labels\
          \ saved to {labels_path}\")\n    print(f\"Scaler saved to {scaler_path}\"\
          )\n\n    return {\n        'features': features_path,\n        'labels':\
          \ labels_path,\n        'scaler': scaler_path\n    } \n\n"
        image: pes1ug19cs601/wine-quality-mlops:latest
    exec-train:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'numpy' 'scikit-learn'\
          \ 'joblib' 'mlflow' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train(features_path: str, labels_path: str, hyperparameters:\
          \ dict) -> dict:\n    \"\"\"Train a RandomForestRegressor model.\"\"\"\n\
          \    # Create output directories\n    os.makedirs('/tmp/models', exist_ok=True)\n\
          \    os.makedirs('/tmp/metrics', exist_ok=True)\n\n    # Define output paths\n\
          \    model_path = '/tmp/models/model.joblib'\n    metrics_path = '/tmp/metrics/metrics.json'\n\
          \n    # Load data\n    X = np.load(features_path)\n    y = np.load(labels_path)\n\
          \n    # Split data\n    X_train, X_test, y_train, y_test = train_test_split(X,\
          \ y, test_size=0.2, random_state=42)\n\n    # Train model\n    model = RandomForestRegressor(**hyperparameters)\n\
          \    model.fit(X_train, y_train)\n\n    # Evaluate model\n    train_score\
          \ = model.score(X_train, y_train)\n    test_score = model.score(X_test,\
          \ y_test)\n\n    # Save metrics\n    metrics = {\n        'train_r2': float(train_score),\n\
          \        'test_r2': float(test_score)\n    }\n    with open(metrics_path,\
          \ 'w') as f:\n        json.dump(metrics, f, indent=2)\n\n    # Save model\n\
          \    joblib.dump(model, model_path)\n\n    # Log to MLflow if tracking URI\
          \ is set\n    if 'MLFLOW_TRACKING_URI' in os.environ:\n        mlflow.set_tracking_uri(os.environ['MLFLOW_TRACKING_URI'])\n\
          \        with mlflow.start_run():\n            mlflow.log_params(hyperparameters)\n\
          \            mlflow.log_metric(\"train_r2\", train_score)\n            mlflow.log_metric(\"\
          test_r2\", test_score)\n            mlflow.sklearn.log_model(model, \"model\"\
          )\n\n    print(f\"Model saved to {model_path}\")\n    print(f\"Metrics saved\
          \ to {metrics_path}\")\n    print(f\"Training metrics: {metrics}\")\n\n\
          \    return {\n        'model': model_path,\n        'metrics': metrics_path\n\
          \    } \n\n"
        env:
        - name: MLFLOW_TRACKING_URI
          value: http://mlflow-service:5000
        image: pes1ug19cs601/wine-quality-mlops:latest
pipelineInfo:
  description: End-to-end ML pipeline for wine quality prediction
  name: wine-quality-pipeline
root:
  dag:
    tasks:
      preprocess:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess
        inputs:
          parameters:
            data_path:
              componentInputParameter: data_path
        taskInfo:
          name: preprocess
      train:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train
        dependentTasks:
        - preprocess
        inputs:
          parameters:
            features_path:
              runtimeValue:
                constant: /tmp/processed/features.npy
            hyperparameters:
              runtimeValue:
                constant:
                  max_depth: '{{$.inputs.parameters[''pipelinechannel--max_depth'']}}'
                  min_samples_leaf: '{{$.inputs.parameters[''pipelinechannel--min_samples_leaf'']}}'
                  min_samples_split: '{{$.inputs.parameters[''pipelinechannel--min_samples_split'']}}'
                  n_estimators: '{{$.inputs.parameters[''pipelinechannel--n_estimators'']}}'
                  random_state: '{{$.inputs.parameters[''pipelinechannel--random_state'']}}'
            labels_path:
              runtimeValue:
                constant: /tmp/processed/labels.npy
            pipelinechannel--max_depth:
              componentInputParameter: max_depth
            pipelinechannel--min_samples_leaf:
              componentInputParameter: min_samples_leaf
            pipelinechannel--min_samples_split:
              componentInputParameter: min_samples_split
            pipelinechannel--n_estimators:
              componentInputParameter: n_estimators
            pipelinechannel--random_state:
              componentInputParameter: random_state
        taskInfo:
          name: train
  inputDefinitions:
    parameters:
      data_path:
        defaultValue: https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv
        isOptional: true
        parameterType: STRING
      max_depth:
        isOptional: true
        parameterType: NUMBER_INTEGER
      min_samples_leaf:
        defaultValue: 1.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      min_samples_split:
        defaultValue: 2.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      n_estimators:
        defaultValue: 100.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      random_state:
        defaultValue: 42.0
        isOptional: true
        parameterType: NUMBER_INTEGER
schemaVersion: 2.1.0
sdkVersion: kfp-2.12.1
